// Kh·ªüi t·∫°o bi·∫øn global ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch c√¥ng vi·ªác
let todos = [];
let currentFilter = 'all'; // B·ªô l·ªçc hi·ªán t·∫°i: 'all', 'pending', 'completed'

// H√†m kh·ªüi t·∫°o ·ª©ng d·ª•ng khi trang web ƒë∆∞·ª£c load
function initApp() {
    console.log('üöÄ Kh·ªüi t·∫°o ·ª©ng d·ª•ng TodoList');
    loadTodosFromStorage(); // T·∫£i d·ªØ li·ªáu t·ª´ localStorage
    renderTodoList(); // Hi·ªÉn th·ªã danh s√°ch c√¥ng vi·ªác
    updateStats(); // C·∫≠p nh·∫≠t th·ªëng k√™
    setupEventListeners(); // Thi·∫øt l·∫≠p c√°c event listener
}

// Thi·∫øt l·∫≠p c√°c event listener
function setupEventListeners() {
    // L·∫Øng nghe s·ª± ki·ªán Enter khi g√µ trong input
    const todoInput = document.getElementById('todoInput');
    todoInput.addEventListener('keypress', function(event) {
        if (event.key === 'Enter') {
            addTodo();
        }
    });
    
    console.log('‚úÖ ƒê√£ thi·∫øt l·∫≠p event listeners');
}

// H√†m t·∫°o ID duy nh·∫•t cho m·ªói todo
function generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

// H√†m l·∫•y th·ªùi gian hi·ªán t·∫°i ƒë·ªãnh d·∫°ng ƒë·∫πp
function getCurrentDateTime() {
    const now = new Date();
    const date = now.toLocaleDateString('vi-VN');
    const time = now.toLocaleTimeString('vi-VN', { 
        hour: '2-digit', 
        minute: '2-digit' 
    });
    return `${date} ${time}`;
}

// H√†m th√™m c√¥ng vi·ªác m·ªõi
function addTodo() {
    const todoInput = document.getElementById('todoInput');
    const todoText = todoInput.value.trim();
    
    // Ki·ªÉm tra input kh√¥ng ƒë∆∞·ª£c r·ªóng
    if (todoText === '') {
        alert('‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung c√¥ng vi·ªác!');
        todoInput.focus();
        return;
    }
    
    // Ki·ªÉm tra ƒë·ªô d√†i t·ªëi ƒëa
    if (todoText.length > 100) {
        alert('‚ö†Ô∏è N·ªôi dung c√¥ng vi·ªác kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±!');
        return;
    }
    
    // T·∫°o ƒë·ªëi t∆∞·ª£ng todo m·ªõi
    const newTodo = {
        id: generateId(),
        text: todoText,
        completed: false,
        createdAt: getCurrentDateTime()
    };
    
    // Th√™m v√†o ƒë·∫ßu m·∫£ng todos
    todos.unshift(newTodo);
    
    // X√≥a n·ªôi dung input
    todoInput.value = '';
    
    // C·∫≠p nh·∫≠t giao di·ªán
    saveTodosToStorage();
    renderTodoList();
    updateStats();
    
    console.log('‚úÖ ƒê√£ th√™m c√¥ng vi·ªác m·ªõi:', newTodo.text);
}

// H√†m chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i ho√†n th√†nh c·ªßa todo
function toggleTodo(todoId) {
    todos = todos.map(todo => {
        if (todo.id === todoId) {
            return {
                ...todo,
                completed: !todo.completed
            };
        }
        return todo;
    });
    
    saveTodosToStorage();
    renderTodoList();
    updateStats();
    
    console.log('üîÑ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i todo:', todoId);
}

// H√†m x√≥a m·ªôt todo
function deleteTodo(todoId) {
    const todoToDelete = todos.find(todo => todo.id === todoId);
    
    if (confirm(`üóëÔ∏è B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a c√¥ng vi·ªác "${todoToDelete.text}"?`)) {
        todos = todos.filter(todo => todo.id !== todoId);
        
        saveTodosToStorage();
        renderTodoList();
        updateStats();
        
        console.log('üóëÔ∏è ƒê√£ x√≥a todo:', todoToDelete.text);
    }
}

// H√†m x√≥a t·∫•t c·∫£ todos
function clearAllTodos() {
    if (todos.length === 0) {
        alert('üìù Kh√¥ng c√≥ c√¥ng vi·ªác n√†o ƒë·ªÉ x√≥a!');
        return;
    }
    
    if (confirm(`üóëÔ∏è B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ ${todos.length} c√¥ng vi·ªác?`)) {
        todos = [];
        
        saveTodosToStorage();
        renderTodoList();
        updateStats();
        
        console.log('üßπ ƒê√£ x√≥a t·∫•t c·∫£ todos');
    }
}

// H√†m l·ªçc todos theo tr·∫°ng th√°i
function filterTodos(filterType) {
    currentFilter = filterType;
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i active c·ªßa c√°c n√∫t filter
    const filterButtons = document.querySelectorAll('.filter-btn');
    filterButtons.forEach(btn => btn.classList.remove('active'));
    
    // T√¨m v√† active n√∫t ƒë∆∞·ª£c click
    const activeButton = Array.from(filterButtons).find(btn => 
        btn.textContent.toLowerCase().includes(getFilterKeyword(filterType))
    );
    if (activeButton) {
        activeButton.classList.add('active');
    }
    
    renderTodoList();
    console.log('üîç ƒê√£ √°p d·ª•ng b·ªô l·ªçc:', filterType);
}

// H√†m helper ƒë·ªÉ l·∫•y t·ª´ kh√≥a c·ªßa filter
function getFilterKeyword(filterType) {
    const keywords = {
        'all': 't·∫•t c·∫£',
        'pending': 'ch∆∞a',
        'completed': 'ƒë√£'
    };
    return keywords[filterType] || 't·∫•t c·∫£';
}

// H√†m l·∫•y danh s√°ch todos ƒë√£ ƒë∆∞·ª£c l·ªçc
function getFilteredTodos() {
    switch (currentFilter) {
        case 'pending':
            return todos.filter(todo => !todo.completed);
        case 'completed':
            return todos.filter(todo => todo.completed);
        default:
            return todos;
    }
}

// H√†m render danh s√°ch todos
function renderTodoList() {
    const todoList = document.getElementById('todoList');
    const emptyState = document.getElementById('emptyState');
    const filteredTodos = getFilteredTodos();
    
    // X√≥a n·ªôi dung c≈©
    todoList.innerHTML = '';
    
    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ todos
    if (filteredTodos.length === 0) {
        emptyState.classList.add('show');
        todoList.style.display = 'none';
        return;
    }
    
    // ·∫®n empty state v√† hi·ªÉn th·ªã danh s√°ch
    emptyState.classList.remove('show');
    todoList.style.display = 'flex';
    
    // Render t·ª´ng todo item
    filteredTodos.forEach(todo => {
        const todoItem = createTodoElement(todo);
        todoList.appendChild(todoItem);
    });
    
    console.log(`üìã ƒê√£ render ${filteredTodos.length} todos`);
}

// H√†m t·∫°o element HTML cho m·ªôt todo
function createTodoElement(todo) {
    const li = document.createElement('li');
    li.className = `todo-item ${todo.completed ? 'completed' : ''}`;
    
    li.innerHTML = `
        <input 
            type="checkbox" 
            class="todo-checkbox" 
            ${todo.completed ? 'checked' : ''}
            onchange="toggleTodo('${todo.id}')"
        >
        <span class="todo-text">${escapeHtml(todo.text)}</span>
        <span class="todo-date">${todo.createdAt}</span>
        <button 
            class="delete-btn" 
            onclick="deleteTodo('${todo.id}')"
            title="X√≥a c√¥ng vi·ªác"
        >
            üóëÔ∏è
        </button>
    `;
    
    return li;
}

// H√†m escape HTML ƒë·ªÉ tr√°nh XSS
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// H√†m c·∫≠p nh·∫≠t th·ªëng k√™
function updateStats() {
    const totalCount = todos.length;
    const completedCount = todos.filter(todo => todo.completed).length;
    const pendingCount = totalCount - completedCount;
    
    // C·∫≠p nh·∫≠t c√°c element hi·ªÉn th·ªã th·ªëng k√™
    document.getElementById('totalCount').textContent = `T·ªïng: ${totalCount}`;
    document.getElementById('pendingCount').textContent = `Ch∆∞a ho√†n th√†nh: ${pendingCount}`;
    document.getElementById('completedCount').textContent = `ƒê√£ ho√†n th√†nh: ${completedCount}`;
    
    console.log('üìä C·∫≠p nh·∫≠t th·ªëng k√™:', { totalCount, pendingCount, completedCount });
}

// H√†m l∆∞u todos v√†o localStorage
function saveTodosToStorage() {
    try {
        localStorage.setItem('todolist_data', JSON.stringify(todos));
        console.log('üíæ ƒê√£ l∆∞u d·ªØ li·ªáu v√†o localStorage');
    } catch (error) {
        console.error('‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu:', error);
        alert('‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu! Vui l√≤ng ki·ªÉm tra b·ªô nh·ªõ tr√¨nh duy·ªát.');
    }
}

// H√†m t·∫£i todos t·ª´ localStorage
function loadTodosFromStorage() {
    try {
        const savedData = localStorage.getItem('todolist_data');
        if (savedData) {
            todos = JSON.parse(savedData);
            console.log('üìÇ ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´ localStorage:', todos.length, 'todos');
        } else {
            console.log('üìÇ Kh√¥ng c√≥ d·ªØ li·ªáu c≈©, kh·ªüi t·∫°o m·∫£ng r·ªóng');
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
        todos = []; // Reset v·ªÅ m·∫£ng r·ªóng n·∫øu c√≥ l·ªói
        alert('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu c≈©! B·∫Øt ƒë·∫ßu v·ªõi danh s√°ch r·ªóng.');
    }
}

// H√†m helper ƒë·ªÉ log tr·∫°ng th√°i ·ª©ng d·ª•ng (d√πng cho debug)
function logAppState() {
    console.log('üîç Tr·∫°ng th√°i ·ª©ng d·ª•ng hi·ªán t·∫°i:');
    console.log('- T·ªïng s·ªë todos:', todos.length);
    console.log('- B·ªô l·ªçc hi·ªán t·∫°i:', currentFilter);
    console.log('- Danh s√°ch todos:', todos);
}

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng khi DOM ƒë√£ s·∫µn s√†ng
document.addEventListener('DOMContentLoaded', function() {
    console.log('üåê DOM ƒë√£ s·∫µn s√†ng, kh·ªüi t·∫°o ·ª©ng d·ª•ng...');
    initApp();
});

// Export functions ƒë·ªÉ c√≥ th·ªÉ test (n·∫øu c·∫ßn)
// Ch·ªâ export khi ƒëang trong m√¥i tr∆∞·ªùng test
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        addTodo,
        toggleTodo,
        deleteTodo,
        clearAllTodos,
        filterTodos,
        updateStats,
        saveTodosToStorage,
        loadTodosFromStorage
    };
}
